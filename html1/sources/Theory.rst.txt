Theory for Lab 2
================

How degrees of freedom are enumerated?
--------------------------------------
First of all, the DoFHandler class enumerates degrees of freedom on a mesh in a rather randomly. 
For most applications and algorithms, the exact way in which degrees of freedom are numbered does not matter. 
The sparsity pattern and matrices that result from this renumbering are therefore also simply a permutation of rows and columns compared to the ones we would get without explicit renumbering.

So, we present the finite element solution as a linear combination of an base functions, here :math:`U_j` is a vector of expansion coefficients.

:math:`u_h(\mathbf x) = \sum_{j=0}^{N-1} U_j \varphi_j(\mathbf x)`

Let`s talk about code
---------------------
We need this for connection of degrees of freedom and lines, verticles and cells.
::

#include <deal.II/dofs/dof_handler.h>

So, this file contains the description of Lagrange elements.
::

#include <deal.II/fe/fe_q.h>

In the following file, several tools for manipulating degrees of freedom can be found.
::

#include <deal.II/dofs/dof_tools.h>

We need to use sparx matrix to visualize non-zero entires.
::

#include <deal.II/dofs/dof_tools.h>

Also, this file uses intermediate sparsity pattern structure.
::

#include <deal.II/lac/dynamic_sparsity_pattern.h>

Spectial algorithm that "counts" degrees of freedom.
::

#include <deal.II/lac/dynamic_sparsity_pattern.h>

And for file stream.
::

#include <fstream>

Mesh generation
---------------

This function creates the circular grid from Lab 1, but it returns the grid it produces via this argument.
::

	void make_grid(Triangulation<2> &triangulation)
	{
	  const Point<2> center(1, 0);
	  const double   inner_radius = 0.5, outer_radius = 1.0;
	  GridGenerator::hyper_shell(
	    triangulation, center, inner_radius, outer_radius, 5);
	  for (unsigned int step = 0; step < 3; ++step)
	    {
	      for (auto &cell : triangulation.active_cell_iterators())
		for (const auto v : cell->vertex_indices())
		  {
		    const double distance_from_center =
		      center.distance(cell->vertex(v));
		    if (std::fabs(distance_from_center - inner_radius) <=
		        1e-6 * inner_radius)
		      {
		        cell->set_refine_flag();
		        break;
		      }
		  }
	      triangulation.execute_coarsening_and_refinement();
	    }
	}

Creation of a DoFHandler
------------------------
Now we have only geoetrical information and a little bit topological, but to use numerical algorithms, one needs some logic information in addition to that: we would like to associate degree of freedom numbers to each vertex (or line, or cell, in case we were using higher order elements) to later generate matrices and vectors which describe a finite element field on the triangulation.

This function shows how to do this. The object to consider is the DoFHandler class template. Before we do so, however, we first need something that describes how many degrees of freedom are to be associated to each of these objects. 

First of all, we need to create an object of this class and then send it on to the DoFHandler object to allocate storage for the degrees of freedom.
::

	void distribute_dofs(DoFHandler<2> &dof_handler)
	{
	  const FE_Q<2> finite_element(1);
	  dof_handler.distribute_dofs(finite_element);
	  
Now that we have associated a degree of freedom with a global number to each vertex, we wonder how to visualize this? There is no simple way to directly visualize the DoF number associated with each vertex. However, such information would hardly ever be truly important, since the numbering itself is more or less arbitrary. Associated with each vertex of the triangulation is a shape function. So, we know that the vertices are numbered more or less randomly by the above function (``DoFHandler::distribute_dofs``), the pattern of nonzero entries in the matrix will be somewhat ragged, and we will take a look at it now.

First we have to create a structure which we use to store the places of nonzero elements. This can then later be used by one or more sparse matrix objects that store the values of the entries in the locations stored by this sparsity pattern. The class that stores the locations is the SparsityPattern class. In order to initialize this intermediate data structure, we have to give it the size of the matrix, which in our case will be square with as many rows and columns as there are degrees of freedom on the grid.
::

	DynamicSparsityPattern dynamic_sparsity_pattern(dof_handler.n_dofs(),
                                                dof_handler.n_dofs());

Then we fill this object with the places where non-zero elements located.
::

	DoFTools::make_sparsity_pattern(dof_handler, dynamic_sparsity_pattern);

Now we are ready to create the actual sparsity pattern that we could later use for our matrix.
::

	SparsityPattern sparsity_pattern;
	sparsity_pattern.copy_from(dynamic_sparsity_pattern);

At last we write the results to output file.
::

	std::ofstream out("sparsity_pattern1.svg");
	sparsity_pattern.print_svg(out);

Renumbering of DoFs
-------------------

As we know, for an entry (i,j) in the matrix to be non-zero the supports of the shape functions i and j needed to intersect. However, the supports of shape functions intersected only if they were adjacent to each other, so in order to have the nonzero entries clustered around the diagonal (where  equals ), we would like to have adjacent shape functions to be numbered with indices (DoF numbers) that differ not too much. One algorithm that adds a little bit of sophistication along these lines is the one by Cuthill and McKee. We will use it in the following function to renumber the degrees of freedom such that the resulting sparsity pattern is more localized around the diagonal. The only interesting part of the function is the first call to ``DoFRenumbering::Cuthill_McKee``, the rest is essentially as before.
::

	void renumber_dofs(DoFHandler<2> &dof_handler)
	{
	  DoFRenumbering::Cuthill_McKee(dof_handler);
	  DynamicSparsityPattern dynamic_sparsity_pattern(dof_handler.n_dofs(),
		                                          dof_handler.n_dofs());
	  DoFTools::make_sparsity_pattern(dof_handler, dynamic_sparsity_pattern);
	  SparsityPattern sparsity_pattern;
	  sparsity_pattern.copy_from(dynamic_sparsity_pattern);
	  std::ofstream out("sparsity_pattern2.svg");
	  sparsity_pattern.print_svg(out);
	}
	
I will add the output files at the different directories.
